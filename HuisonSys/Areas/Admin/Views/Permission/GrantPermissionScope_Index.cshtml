@{
    //【GetTreeList】
    ViewBag.Title = "分配角色模块";
    Layout = "~/Areas/Admin/Views/Shared/_InnerLayout.cshtml";
}

@Html.Partial("~/Areas/Admin/Views/Shared/_Header.cshtml", Request.Url.AbsolutePath)
<div class="mini-fit">
    <div id="RoleID" class="mini-hidden"></div>
    <div id="Scope-datagrid" class="mini-treegrid" ajaxoptions="{type : 'get'}" style="width:100%;height:100%;" autoload="false"
         url="@Url.Action("GetGrantDataResourceList", "Permission", new { area = "Admin" })"
         treecolumn="treename" idfield="ID" parentfield="ParentID" datafield="Data"
         resultastree="false" allowresize="true" expandonload="true" showtreeicon="false"
         allowselect="false" allowcellselect="false" enablehottrack="false"
         ondrawcell="ondrawcell">
        <div property="columns">
            <div type="indexcolumn"></div>
            <div name="treename" field="Title" width="210">数据资源</div>
            <div field="PermissionScopes" width="100%" style="overflow: auto; white-space: normal; text-overflow:initial">数据对象</div>
        </div>
    </div>

</div>
<div class="mini-toolbar" style="text-align:center;padding-top:8px;padding-bottom:8px;" borderstyle="border:0;">
    <a class="mini-button" style="width:60px;" onclick="onOk()">确定</a>
    <span style="display:inline-block;width:25px;"></span>
    <a class="mini-button" style="width:60px;" onclick="onCancel()">取消</a>
</div>

<script>
    mini.parse()
    var Scope_grid = mini.get("Scope-datagrid");

    ////////////////////
    //标准方法接口定义
    function SetGridData(data) {
        debugger;
        //跨页面传递的数据对象，克隆后才可以安全使用
        data = mini.clone(data);
        mini.get("RoleID").setValue(data.ID);

        Scope_grid.load({
            RoleID: data.ID
        }, function (re) {
            var jdata = ajaxTips(re.text);
        }, function (re) {
        })
    }

    function ondrawcell(e) {
        var tree = e.sender,
            record = e.record,
            column = e.column,
            field = e.field,
            ID = record[tree.getIdField()],
            Expands = record.Expands;
        

        function createCheckboxs(expands) {
            if (!expands) return "";
            var html = "";
            for (var i = 0, l = expands.length; i < l; i++) {
                var expand = expands[i];
                var clickFn = 'checkExp(\'' + ID + '\',\'' + expand.ID + '\', this.checked)';
                var checked = expand.Checked ? 'checked' : '';
                html += '<label class="function-item"><input onclick="' + clickFn + '" ' + checked + ' type="checkbox" name="'
                        + expand.ID + '" hideFocus/>' + expand.Title + '</label>';
            }
            return html;
        }

        if (field == 'PermissionScopes') {
            e.cellHtml = createCheckboxs(Expands);
        }
    }

    function checkExp(id, expandid, checked) {
        var record = Scope_grid.getRecord(id);
        if (!record) return;
        var expands = record.Expands;
        if (!expands) return;
        function getexpandid(expandid) {
            for (var i = 0, l = expands.length; i < l; i++) {
                var o = expands[i];
                if (o.ID == expandid) return o;
            }
        }
        var obj = getexpandid(expandid);
        if (!obj) return;
        obj.Checked = checked;
    }

    function getExpData() {
        var data = Scope_grid.getList();
        return data;
    }


    //////////////////////////////////
    function CloseWindow(action) {
        if (window.CloseOwnerWindow) return window.CloseOwnerWindow(action);
        else window.close();
    }

    function onOk() {

        var RoleID = mini.get("RoleID").getValue();
        var ScopeIDs;

        //var ids = [];
        //var rows = Scope_grid.getCheckedNodes(false);
        //for (var i = 0, l = rows.length; i < l; i++) {
        //    var row = rows[i];
        //    ids.push(row.PermissionScope_ID);
        //}

        var ids = [];
        var expData = getExpData();
        for (var i = 0, l = expData.length; i < l; i++) {
            var expands = expData[i].Expands;
            if (!expands) continue;
            for (var j = 0, jl = expands.length; j < jl; j++) {
                if (expands[j].Checked == true) {
                    ids.push(expands[j].ID);
                }
            }
        }
        ScopeIDs = ids.join(",");
        console.log(ScopeIDs);

        var url = "@Url.Action("GrantPermissionScope", "Permission", new { area = "Admin" })";
        var data = {
            RoleID: RoleID,
            ScopeIDs: ScopeIDs
        };
        doGetSync(url, data, function (jdata) {
            if (jdata.Code == "200") {
                CloseWindow("save");
            }
        });
    }
    function onCancel() {
        CloseWindow("cancel");
    }



</script>
